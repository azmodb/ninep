// THIS FILE IS AUTOMATICALLY GENERATED by `go run internal/generator.go`.
// EDIT legacy.go, linux.go INSTEAD.

package proto

import "sync"

var tversionPool = sync.Pool{
	New: func() interface{} { return &Tversion{} },
}

// AllocTversion selects an arbitrary item from the Tversion Pool
// removes it, and returns it to the caller.
func AllocTversion() *Tversion {
	return tversionPool.Get().(*Tversion)
}

// Release resets all state and adds m to the Tversion pool.
func (m *Tversion) Release() {
	m.Reset()
	tversionPool.Put(m)
}

var rversionPool = sync.Pool{
	New: func() interface{} { return &Rversion{} },
}

// AllocRversion selects an arbitrary item from the Rversion Pool
// removes it, and returns it to the caller.
func AllocRversion() *Rversion {
	return rversionPool.Get().(*Rversion)
}

// Release resets all state and adds m to the Rversion pool.
func (m *Rversion) Release() {
	m.Reset()
	rversionPool.Put(m)
}

var tflushPool = sync.Pool{
	New: func() interface{} { return &Tflush{} },
}

// AllocTflush selects an arbitrary item from the Tflush Pool
// removes it, and returns it to the caller.
func AllocTflush() *Tflush {
	return tflushPool.Get().(*Tflush)
}

// Release resets all state and adds m to the Tflush pool.
func (m *Tflush) Release() {
	m.Reset()
	tflushPool.Put(m)
}

var rflushPool = sync.Pool{
	New: func() interface{} { return &Rflush{} },
}

// AllocRflush selects an arbitrary item from the Rflush Pool
// removes it, and returns it to the caller.
func AllocRflush() *Rflush {
	return rflushPool.Get().(*Rflush)
}

// Release resets all state and adds m to the Rflush pool.
func (m *Rflush) Release() {
	m.Reset()
	rflushPool.Put(m)
}

var twalkPool = sync.Pool{
	New: func() interface{} { return &Twalk{} },
}

// AllocTwalk selects an arbitrary item from the Twalk Pool
// removes it, and returns it to the caller.
func AllocTwalk() *Twalk {
	return twalkPool.Get().(*Twalk)
}

// Release resets all state and adds m to the Twalk pool.
func (m *Twalk) Release() {
	m.Reset()
	twalkPool.Put(m)
}

var treadPool = sync.Pool{
	New: func() interface{} { return &Tread{} },
}

// AllocTread selects an arbitrary item from the Tread Pool
// removes it, and returns it to the caller.
func AllocTread() *Tread {
	return treadPool.Get().(*Tread)
}

// Release resets all state and adds m to the Tread pool.
func (m *Tread) Release() {
	m.Reset()
	treadPool.Put(m)
}

var rreadPool = sync.Pool{
	New: func() interface{} { return &Rread{} },
}

// AllocRread selects an arbitrary item from the Rread Pool
// removes it, and returns it to the caller.
func AllocRread() *Rread {
	return rreadPool.Get().(*Rread)
}

// Release resets all state and adds m to the Rread pool.
func (m *Rread) Release() {
	m.Reset()
	rreadPool.Put(m)
}

var twritePool = sync.Pool{
	New: func() interface{} { return &Twrite{} },
}

// AllocTwrite selects an arbitrary item from the Twrite Pool
// removes it, and returns it to the caller.
func AllocTwrite() *Twrite {
	return twritePool.Get().(*Twrite)
}

// Release resets all state and adds m to the Twrite pool.
func (m *Twrite) Release() {
	m.Reset()
	twritePool.Put(m)
}

var rwritePool = sync.Pool{
	New: func() interface{} { return &Rwrite{} },
}

// AllocRwrite selects an arbitrary item from the Rwrite Pool
// removes it, and returns it to the caller.
func AllocRwrite() *Rwrite {
	return rwritePool.Get().(*Rwrite)
}

// Release resets all state and adds m to the Rwrite pool.
func (m *Rwrite) Release() {
	m.Reset()
	rwritePool.Put(m)
}

var tclunkPool = sync.Pool{
	New: func() interface{} { return &Tclunk{} },
}

// AllocTclunk selects an arbitrary item from the Tclunk Pool
// removes it, and returns it to the caller.
func AllocTclunk() *Tclunk {
	return tclunkPool.Get().(*Tclunk)
}

// Release resets all state and adds m to the Tclunk pool.
func (m *Tclunk) Release() {
	m.Reset()
	tclunkPool.Put(m)
}

var rclunkPool = sync.Pool{
	New: func() interface{} { return &Rclunk{} },
}

// AllocRclunk selects an arbitrary item from the Rclunk Pool
// removes it, and returns it to the caller.
func AllocRclunk() *Rclunk {
	return rclunkPool.Get().(*Rclunk)
}

// Release resets all state and adds m to the Rclunk pool.
func (m *Rclunk) Release() {
	m.Reset()
	rclunkPool.Put(m)
}

var tremovePool = sync.Pool{
	New: func() interface{} { return &Tremove{} },
}

// AllocTremove selects an arbitrary item from the Tremove Pool
// removes it, and returns it to the caller.
func AllocTremove() *Tremove {
	return tremovePool.Get().(*Tremove)
}

// Release resets all state and adds m to the Tremove pool.
func (m *Tremove) Release() {
	m.Reset()
	tremovePool.Put(m)
}

var rremovePool = sync.Pool{
	New: func() interface{} { return &Rremove{} },
}

// AllocRremove selects an arbitrary item from the Rremove Pool
// removes it, and returns it to the caller.
func AllocRremove() *Rremove {
	return rremovePool.Get().(*Rremove)
}

// Release resets all state and adds m to the Rremove pool.
func (m *Rremove) Release() {
	m.Reset()
	rremovePool.Put(m)
}

var tlauthPool = sync.Pool{
	New: func() interface{} { return &Tlauth{} },
}

// AllocTlauth selects an arbitrary item from the Tlauth Pool
// removes it, and returns it to the caller.
func AllocTlauth() *Tlauth {
	return tlauthPool.Get().(*Tlauth)
}

// Release resets all state and adds m to the Tlauth pool.
func (m *Tlauth) Release() {
	m.Reset()
	tlauthPool.Put(m)
}

var rlauthPool = sync.Pool{
	New: func() interface{} { return &Rlauth{} },
}

// AllocRlauth selects an arbitrary item from the Rlauth Pool
// removes it, and returns it to the caller.
func AllocRlauth() *Rlauth {
	return rlauthPool.Get().(*Rlauth)
}

// Release resets all state and adds m to the Rlauth pool.
func (m *Rlauth) Release() {
	m.Reset()
	rlauthPool.Put(m)
}

var tlattachPool = sync.Pool{
	New: func() interface{} { return &Tlattach{} },
}

// AllocTlattach selects an arbitrary item from the Tlattach Pool
// removes it, and returns it to the caller.
func AllocTlattach() *Tlattach {
	return tlattachPool.Get().(*Tlattach)
}

// Release resets all state and adds m to the Tlattach pool.
func (m *Tlattach) Release() {
	m.Reset()
	tlattachPool.Put(m)
}

var rlattachPool = sync.Pool{
	New: func() interface{} { return &Rlattach{} },
}

// AllocRlattach selects an arbitrary item from the Rlattach Pool
// removes it, and returns it to the caller.
func AllocRlattach() *Rlattach {
	return rlattachPool.Get().(*Rlattach)
}

// Release resets all state and adds m to the Rlattach pool.
func (m *Rlattach) Release() {
	m.Reset()
	rlattachPool.Put(m)
}

var rlerrorPool = sync.Pool{
	New: func() interface{} { return &Rlerror{} },
}

// AllocRlerror selects an arbitrary item from the Rlerror Pool
// removes it, and returns it to the caller.
func AllocRlerror() *Rlerror {
	return rlerrorPool.Get().(*Rlerror)
}

// Release resets all state and adds m to the Rlerror pool.
func (m *Rlerror) Release() {
	m.Reset()
	rlerrorPool.Put(m)
}

var tstatfsPool = sync.Pool{
	New: func() interface{} { return &Tstatfs{} },
}

// AllocTstatfs selects an arbitrary item from the Tstatfs Pool
// removes it, and returns it to the caller.
func AllocTstatfs() *Tstatfs {
	return tstatfsPool.Get().(*Tstatfs)
}

// Release resets all state and adds m to the Tstatfs pool.
func (m *Tstatfs) Release() {
	m.Reset()
	tstatfsPool.Put(m)
}

var rstatfsPool = sync.Pool{
	New: func() interface{} { return &Rstatfs{} },
}

// AllocRstatfs selects an arbitrary item from the Rstatfs Pool
// removes it, and returns it to the caller.
func AllocRstatfs() *Rstatfs {
	return rstatfsPool.Get().(*Rstatfs)
}

// Release resets all state and adds m to the Rstatfs pool.
func (m *Rstatfs) Release() {
	m.Reset()
	rstatfsPool.Put(m)
}

var tlopenPool = sync.Pool{
	New: func() interface{} { return &Tlopen{} },
}

// AllocTlopen selects an arbitrary item from the Tlopen Pool
// removes it, and returns it to the caller.
func AllocTlopen() *Tlopen {
	return tlopenPool.Get().(*Tlopen)
}

// Release resets all state and adds m to the Tlopen pool.
func (m *Tlopen) Release() {
	m.Reset()
	tlopenPool.Put(m)
}

var rlopenPool = sync.Pool{
	New: func() interface{} { return &Rlopen{} },
}

// AllocRlopen selects an arbitrary item from the Rlopen Pool
// removes it, and returns it to the caller.
func AllocRlopen() *Rlopen {
	return rlopenPool.Get().(*Rlopen)
}

// Release resets all state and adds m to the Rlopen pool.
func (m *Rlopen) Release() {
	m.Reset()
	rlopenPool.Put(m)
}

var tlcreatePool = sync.Pool{
	New: func() interface{} { return &Tlcreate{} },
}

// AllocTlcreate selects an arbitrary item from the Tlcreate Pool
// removes it, and returns it to the caller.
func AllocTlcreate() *Tlcreate {
	return tlcreatePool.Get().(*Tlcreate)
}

// Release resets all state and adds m to the Tlcreate pool.
func (m *Tlcreate) Release() {
	m.Reset()
	tlcreatePool.Put(m)
}

var rlcreatePool = sync.Pool{
	New: func() interface{} { return &Rlcreate{} },
}

// AllocRlcreate selects an arbitrary item from the Rlcreate Pool
// removes it, and returns it to the caller.
func AllocRlcreate() *Rlcreate {
	return rlcreatePool.Get().(*Rlcreate)
}

// Release resets all state and adds m to the Rlcreate pool.
func (m *Rlcreate) Release() {
	m.Reset()
	rlcreatePool.Put(m)
}

var tsymlinkPool = sync.Pool{
	New: func() interface{} { return &Tsymlink{} },
}

// AllocTsymlink selects an arbitrary item from the Tsymlink Pool
// removes it, and returns it to the caller.
func AllocTsymlink() *Tsymlink {
	return tsymlinkPool.Get().(*Tsymlink)
}

// Release resets all state and adds m to the Tsymlink pool.
func (m *Tsymlink) Release() {
	m.Reset()
	tsymlinkPool.Put(m)
}

var rsymlinkPool = sync.Pool{
	New: func() interface{} { return &Rsymlink{} },
}

// AllocRsymlink selects an arbitrary item from the Rsymlink Pool
// removes it, and returns it to the caller.
func AllocRsymlink() *Rsymlink {
	return rsymlinkPool.Get().(*Rsymlink)
}

// Release resets all state and adds m to the Rsymlink pool.
func (m *Rsymlink) Release() {
	m.Reset()
	rsymlinkPool.Put(m)
}

var tmknodPool = sync.Pool{
	New: func() interface{} { return &Tmknod{} },
}

// AllocTmknod selects an arbitrary item from the Tmknod Pool
// removes it, and returns it to the caller.
func AllocTmknod() *Tmknod {
	return tmknodPool.Get().(*Tmknod)
}

// Release resets all state and adds m to the Tmknod pool.
func (m *Tmknod) Release() {
	m.Reset()
	tmknodPool.Put(m)
}

var rmknodPool = sync.Pool{
	New: func() interface{} { return &Rmknod{} },
}

// AllocRmknod selects an arbitrary item from the Rmknod Pool
// removes it, and returns it to the caller.
func AllocRmknod() *Rmknod {
	return rmknodPool.Get().(*Rmknod)
}

// Release resets all state and adds m to the Rmknod pool.
func (m *Rmknod) Release() {
	m.Reset()
	rmknodPool.Put(m)
}

var trenamePool = sync.Pool{
	New: func() interface{} { return &Trename{} },
}

// AllocTrename selects an arbitrary item from the Trename Pool
// removes it, and returns it to the caller.
func AllocTrename() *Trename {
	return trenamePool.Get().(*Trename)
}

// Release resets all state and adds m to the Trename pool.
func (m *Trename) Release() {
	m.Reset()
	trenamePool.Put(m)
}

var rrenamePool = sync.Pool{
	New: func() interface{} { return &Rrename{} },
}

// AllocRrename selects an arbitrary item from the Rrename Pool
// removes it, and returns it to the caller.
func AllocRrename() *Rrename {
	return rrenamePool.Get().(*Rrename)
}

// Release resets all state and adds m to the Rrename pool.
func (m *Rrename) Release() {
	m.Reset()
	rrenamePool.Put(m)
}

var treadlinkPool = sync.Pool{
	New: func() interface{} { return &Treadlink{} },
}

// AllocTreadlink selects an arbitrary item from the Treadlink Pool
// removes it, and returns it to the caller.
func AllocTreadlink() *Treadlink {
	return treadlinkPool.Get().(*Treadlink)
}

// Release resets all state and adds m to the Treadlink pool.
func (m *Treadlink) Release() {
	m.Reset()
	treadlinkPool.Put(m)
}

var rreadlinkPool = sync.Pool{
	New: func() interface{} { return &Rreadlink{} },
}

// AllocRreadlink selects an arbitrary item from the Rreadlink Pool
// removes it, and returns it to the caller.
func AllocRreadlink() *Rreadlink {
	return rreadlinkPool.Get().(*Rreadlink)
}

// Release resets all state and adds m to the Rreadlink pool.
func (m *Rreadlink) Release() {
	m.Reset()
	rreadlinkPool.Put(m)
}

var tgetattrPool = sync.Pool{
	New: func() interface{} { return &Tgetattr{} },
}

// AllocTgetattr selects an arbitrary item from the Tgetattr Pool
// removes it, and returns it to the caller.
func AllocTgetattr() *Tgetattr {
	return tgetattrPool.Get().(*Tgetattr)
}

// Release resets all state and adds m to the Tgetattr pool.
func (m *Tgetattr) Release() {
	m.Reset()
	tgetattrPool.Put(m)
}

var rgetattrPool = sync.Pool{
	New: func() interface{} { return &Rgetattr{} },
}

// AllocRgetattr selects an arbitrary item from the Rgetattr Pool
// removes it, and returns it to the caller.
func AllocRgetattr() *Rgetattr {
	return rgetattrPool.Get().(*Rgetattr)
}

// Release resets all state and adds m to the Rgetattr pool.
func (m *Rgetattr) Release() {
	m.Reset()
	rgetattrPool.Put(m)
}

var tsetattrPool = sync.Pool{
	New: func() interface{} { return &Tsetattr{} },
}

// AllocTsetattr selects an arbitrary item from the Tsetattr Pool
// removes it, and returns it to the caller.
func AllocTsetattr() *Tsetattr {
	return tsetattrPool.Get().(*Tsetattr)
}

// Release resets all state and adds m to the Tsetattr pool.
func (m *Tsetattr) Release() {
	m.Reset()
	tsetattrPool.Put(m)
}

var rsetattrPool = sync.Pool{
	New: func() interface{} { return &Rsetattr{} },
}

// AllocRsetattr selects an arbitrary item from the Rsetattr Pool
// removes it, and returns it to the caller.
func AllocRsetattr() *Rsetattr {
	return rsetattrPool.Get().(*Rsetattr)
}

// Release resets all state and adds m to the Rsetattr pool.
func (m *Rsetattr) Release() {
	m.Reset()
	rsetattrPool.Put(m)
}

var txattrwalkPool = sync.Pool{
	New: func() interface{} { return &Txattrwalk{} },
}

// AllocTxattrwalk selects an arbitrary item from the Txattrwalk Pool
// removes it, and returns it to the caller.
func AllocTxattrwalk() *Txattrwalk {
	return txattrwalkPool.Get().(*Txattrwalk)
}

// Release resets all state and adds m to the Txattrwalk pool.
func (m *Txattrwalk) Release() {
	m.Reset()
	txattrwalkPool.Put(m)
}

var rxattrwalkPool = sync.Pool{
	New: func() interface{} { return &Rxattrwalk{} },
}

// AllocRxattrwalk selects an arbitrary item from the Rxattrwalk Pool
// removes it, and returns it to the caller.
func AllocRxattrwalk() *Rxattrwalk {
	return rxattrwalkPool.Get().(*Rxattrwalk)
}

// Release resets all state and adds m to the Rxattrwalk pool.
func (m *Rxattrwalk) Release() {
	m.Reset()
	rxattrwalkPool.Put(m)
}

var txattrcreatePool = sync.Pool{
	New: func() interface{} { return &Txattrcreate{} },
}

// AllocTxattrcreate selects an arbitrary item from the Txattrcreate Pool
// removes it, and returns it to the caller.
func AllocTxattrcreate() *Txattrcreate {
	return txattrcreatePool.Get().(*Txattrcreate)
}

// Release resets all state and adds m to the Txattrcreate pool.
func (m *Txattrcreate) Release() {
	m.Reset()
	txattrcreatePool.Put(m)
}

var rxattrcreatePool = sync.Pool{
	New: func() interface{} { return &Rxattrcreate{} },
}

// AllocRxattrcreate selects an arbitrary item from the Rxattrcreate Pool
// removes it, and returns it to the caller.
func AllocRxattrcreate() *Rxattrcreate {
	return rxattrcreatePool.Get().(*Rxattrcreate)
}

// Release resets all state and adds m to the Rxattrcreate pool.
func (m *Rxattrcreate) Release() {
	m.Reset()
	rxattrcreatePool.Put(m)
}

var treaddirPool = sync.Pool{
	New: func() interface{} { return &Treaddir{} },
}

// AllocTreaddir selects an arbitrary item from the Treaddir Pool
// removes it, and returns it to the caller.
func AllocTreaddir() *Treaddir {
	return treaddirPool.Get().(*Treaddir)
}

// Release resets all state and adds m to the Treaddir pool.
func (m *Treaddir) Release() {
	m.Reset()
	treaddirPool.Put(m)
}

var rreaddirPool = sync.Pool{
	New: func() interface{} { return &Rreaddir{} },
}

// AllocRreaddir selects an arbitrary item from the Rreaddir Pool
// removes it, and returns it to the caller.
func AllocRreaddir() *Rreaddir {
	return rreaddirPool.Get().(*Rreaddir)
}

// Release resets all state and adds m to the Rreaddir pool.
func (m *Rreaddir) Release() {
	m.Reset()
	rreaddirPool.Put(m)
}

var tfsyncPool = sync.Pool{
	New: func() interface{} { return &Tfsync{} },
}

// AllocTfsync selects an arbitrary item from the Tfsync Pool
// removes it, and returns it to the caller.
func AllocTfsync() *Tfsync {
	return tfsyncPool.Get().(*Tfsync)
}

// Release resets all state and adds m to the Tfsync pool.
func (m *Tfsync) Release() {
	m.Reset()
	tfsyncPool.Put(m)
}

var rfsyncPool = sync.Pool{
	New: func() interface{} { return &Rfsync{} },
}

// AllocRfsync selects an arbitrary item from the Rfsync Pool
// removes it, and returns it to the caller.
func AllocRfsync() *Rfsync {
	return rfsyncPool.Get().(*Rfsync)
}

// Release resets all state and adds m to the Rfsync pool.
func (m *Rfsync) Release() {
	m.Reset()
	rfsyncPool.Put(m)
}

var tlockPool = sync.Pool{
	New: func() interface{} { return &Tlock{} },
}

// AllocTlock selects an arbitrary item from the Tlock Pool
// removes it, and returns it to the caller.
func AllocTlock() *Tlock {
	return tlockPool.Get().(*Tlock)
}

// Release resets all state and adds m to the Tlock pool.
func (m *Tlock) Release() {
	m.Reset()
	tlockPool.Put(m)
}

var rlockPool = sync.Pool{
	New: func() interface{} { return &Rlock{} },
}

// AllocRlock selects an arbitrary item from the Rlock Pool
// removes it, and returns it to the caller.
func AllocRlock() *Rlock {
	return rlockPool.Get().(*Rlock)
}

// Release resets all state and adds m to the Rlock pool.
func (m *Rlock) Release() {
	m.Reset()
	rlockPool.Put(m)
}

var tgetlockPool = sync.Pool{
	New: func() interface{} { return &Tgetlock{} },
}

// AllocTgetlock selects an arbitrary item from the Tgetlock Pool
// removes it, and returns it to the caller.
func AllocTgetlock() *Tgetlock {
	return tgetlockPool.Get().(*Tgetlock)
}

// Release resets all state and adds m to the Tgetlock pool.
func (m *Tgetlock) Release() {
	m.Reset()
	tgetlockPool.Put(m)
}

var rgetlockPool = sync.Pool{
	New: func() interface{} { return &Rgetlock{} },
}

// AllocRgetlock selects an arbitrary item from the Rgetlock Pool
// removes it, and returns it to the caller.
func AllocRgetlock() *Rgetlock {
	return rgetlockPool.Get().(*Rgetlock)
}

// Release resets all state and adds m to the Rgetlock pool.
func (m *Rgetlock) Release() {
	m.Reset()
	rgetlockPool.Put(m)
}

var tlinkPool = sync.Pool{
	New: func() interface{} { return &Tlink{} },
}

// AllocTlink selects an arbitrary item from the Tlink Pool
// removes it, and returns it to the caller.
func AllocTlink() *Tlink {
	return tlinkPool.Get().(*Tlink)
}

// Release resets all state and adds m to the Tlink pool.
func (m *Tlink) Release() {
	m.Reset()
	tlinkPool.Put(m)
}

var rlinkPool = sync.Pool{
	New: func() interface{} { return &Rlink{} },
}

// AllocRlink selects an arbitrary item from the Rlink Pool
// removes it, and returns it to the caller.
func AllocRlink() *Rlink {
	return rlinkPool.Get().(*Rlink)
}

// Release resets all state and adds m to the Rlink pool.
func (m *Rlink) Release() {
	m.Reset()
	rlinkPool.Put(m)
}

var tmkdirPool = sync.Pool{
	New: func() interface{} { return &Tmkdir{} },
}

// AllocTmkdir selects an arbitrary item from the Tmkdir Pool
// removes it, and returns it to the caller.
func AllocTmkdir() *Tmkdir {
	return tmkdirPool.Get().(*Tmkdir)
}

// Release resets all state and adds m to the Tmkdir pool.
func (m *Tmkdir) Release() {
	m.Reset()
	tmkdirPool.Put(m)
}

var rmkdirPool = sync.Pool{
	New: func() interface{} { return &Rmkdir{} },
}

// AllocRmkdir selects an arbitrary item from the Rmkdir Pool
// removes it, and returns it to the caller.
func AllocRmkdir() *Rmkdir {
	return rmkdirPool.Get().(*Rmkdir)
}

// Release resets all state and adds m to the Rmkdir pool.
func (m *Rmkdir) Release() {
	m.Reset()
	rmkdirPool.Put(m)
}

var trenameatPool = sync.Pool{
	New: func() interface{} { return &Trenameat{} },
}

// AllocTrenameat selects an arbitrary item from the Trenameat Pool
// removes it, and returns it to the caller.
func AllocTrenameat() *Trenameat {
	return trenameatPool.Get().(*Trenameat)
}

// Release resets all state and adds m to the Trenameat pool.
func (m *Trenameat) Release() {
	m.Reset()
	trenameatPool.Put(m)
}

var rrenameatPool = sync.Pool{
	New: func() interface{} { return &Rrenameat{} },
}

// AllocRrenameat selects an arbitrary item from the Rrenameat Pool
// removes it, and returns it to the caller.
func AllocRrenameat() *Rrenameat {
	return rrenameatPool.Get().(*Rrenameat)
}

// Release resets all state and adds m to the Rrenameat pool.
func (m *Rrenameat) Release() {
	m.Reset()
	rrenameatPool.Put(m)
}

var tunlinkatPool = sync.Pool{
	New: func() interface{} { return &Tunlinkat{} },
}

// AllocTunlinkat selects an arbitrary item from the Tunlinkat Pool
// removes it, and returns it to the caller.
func AllocTunlinkat() *Tunlinkat {
	return tunlinkatPool.Get().(*Tunlinkat)
}

// Release resets all state and adds m to the Tunlinkat pool.
func (m *Tunlinkat) Release() {
	m.Reset()
	tunlinkatPool.Put(m)
}

var runlinkatPool = sync.Pool{
	New: func() interface{} { return &Runlinkat{} },
}

// AllocRunlinkat selects an arbitrary item from the Runlinkat Pool
// removes it, and returns it to the caller.
func AllocRunlinkat() *Runlinkat {
	return runlinkatPool.Get().(*Runlinkat)
}

// Release resets all state and adds m to the Runlinkat pool.
func (m *Runlinkat) Release() {
	m.Reset()
	runlinkatPool.Put(m)
}
